using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using NoteService.API.Models;
using NoteService.API.Repository;
using NoteService.API.Service;
using Swashbuckle.AspNetCore.Swagger;
using System;
using System.IO;
using System.Reflection;

namespace NoteService.API
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddCors(o => o.AddPolicy("GoogleKeep", builder =>
            {
                builder.AllowAnyOrigin()
                       .AllowAnyMethod()
                       .AllowAnyHeader();
            }));
            this.ValidateToken(Configuration, services);
            services.AddScoped<INoteRepository, NoteRepository>();
            services.AddScoped<INoteContext, NoteContext>();
            services.AddScoped<INoteService, Service.NoteService>();
            services.Configure<Settings>(
               options => {
                   options.ConnectionString = Configuration.GetSection("MongoDB:ConnectionString").Value;
                   options.Database = Configuration.GetSection("MongoDB:Database").Value;
               }
               );
            //This line adds Swagger generation services to our container.
            services.AddSwaggerGen(c =>
            {
                //The generated Swagger JSON file will have these properties.
                c.SwaggerDoc("v1", new Info
                {
                    Title = "Note Swagger",
                    Version = "v1",
                });

                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);
            });
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseAuthentication();
            app.UseSwagger(a => { a.RouteTemplate = "NoteService/swagger/{documentName}/swagger.json"; });

            //This line enables Swagger UI, which provides us with a nice, simple UI with which we can view our API calls.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/NoteService/swagger/v1/swagger.json", "Note Swagger");
                c.RoutePrefix = "NoteService/swagger";
            });
            app.UseCors("GoogleKeep");
            app.UseMvc();
           
        }
        private void ValidateToken(IConfiguration configuration,IServiceCollection services)
        {
            var audienceConfig = configuration.GetSection("Audience");
            var key = audienceConfig["Secret"];
            var keyByteArray = System.Text.Encoding.ASCII.GetBytes(key);
            var signingKey = new SymmetricSecurityKey(keyByteArray);

            var tokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = signingKey,

                ValidateIssuer = true,
                ValidIssuer = audienceConfig["Iss"],

                ValidateAudience = true,
                ValidAudience = audienceConfig["Aud"],

                ValidateLifetime = true,
                ClockSkew = TimeSpan.Zero

            };
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(o => {
                o.TokenValidationParameters = tokenValidationParameters;
            });

        }
    }
}
